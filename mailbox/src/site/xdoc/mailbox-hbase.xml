<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.    
-->
<document>

    <properties>
        <title>Mailbox HBase</title>
    </properties>

    <body>

        <section name="Mailbox HBase Responsibility">
      This module provides a mailbox implementation for peristing mailboxes (messages, and subscriptions) in a HBase cluster. 
        </section>
        
        <section name="Overview">
            <p>
              This should provide an overview of the design and implementation of Mailbox HBase.
              <!-- 
                The current design is illustrated in <img src="apache-james-mailbox-hbase/images/james-hbase-mailbox-schema.svg"/>. It is generated from a MindMap file that you can find in the sources.
              -->
            </p>
            <subsection name="Tables">
                <p>The current implementations stores Messages, Mailboxes and Subscriptions in their own tables.</p> There are:
                <ul>
                    <li>JAMES_MAILBOXES - for storing mailboxes.</li>
                    <li>JAMES_MESSAGES - for storing messages.</li>
                    <li>JAMES_SUBSCRIPTIONS - for storing user subscriptions.</li>
                </ul>
            </subsection> 
            
            <subsection name="Mailbox UID generation">
                <p>Mailboxes are identified using a unique 
                    <a href="http://download.oracle.com/javase/6/docs/api/java/util/UUID.html">UUID</a> 
                </p>
            </subsection>
            
            <subsection name="Message UID generation">
                <p>The IMAP RFC states that mailboxes should keep message UIDs unique and in ascending order. Mailbox HBase uses 
                    <a href="http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/client/HTable.html#incrementColumnValue(byte[],%20byte[],%20byte[],%20long)">incrementColumnValue</a>
                 int the HBaseUidProvider implementation to achieve this. 
                </p>
            </subsection>
            <subsection name="HBase row keys">
                HBase uses keys to access values. The current design uses the following row key structure:
                <ul>
                    <li>JAMES_MAILBOXES: row key is mailbox UUID</li>    
                    <li>JAMES_MESSAGES: row key is compound by concatenating mailbox UID and message UID (in reverseorder). 
                This way we have messages groupd by mailbox and in descending order (most recent first).
                    </li>
                    <li>JAMES_SUBSCRIPTION: row key is user name.</li>
                </ul>
            </subsection>
            <subsection name="Misc">
                <p>Message bodyes (more importantly big attachements) sent to many users are stored many times. There is no space sharing yet.</p>
                <p>Message data and mssage meta-data (flags and properties) are stored in different column families 
                so the column family optimization options can apply. Keep in mind that message data does not change, while meta-data does change.
                </p>
            </subsection>
            
        </section>
        
        <section name="Installation">
            <p>In order for the mailbox implementation to work you have to provide it with a link to your HBase cluster. Putting 
                <em>hbase-site.xml</em> on the class path should be enough. Mailbox HBase will pick it up an read all the configuration parameters from it.
            </p>
        </section>
        
        <section name="Mailbox HBase Classes">
            <p>This is a onverview of the most important classes in the implementation. </p>
            <subsection name="HBaseMailboxManager">
                <p> 
                    <strong>HBaseMailboxManager</strong> extends the  
                    <strong>StoreMailboxManager</strong> class. 
                It has a simple implementation that just overrides the 
                    <em>doCreateMailbox</em> method to return a HBaseMailbox implementation and 
                    <em>createMessageManger</em> method to return a HBaseMessageManager implementation. 
                Other then that it relies on the default StoreMailboxManager implementation. 
                </p>
            </subsection>
            
            <subsection name="HBaseMessageManager">
                <p> 
                    <strong>HBaseMessageManager</strong> extends StoreMailboxManager and provides an implementation for getPermanentFlags method. 
                </p>
            </subsection>
            
            <subsection name="Chunked Streams">
                <p>Message bodies can have varying sizes. Some have attachements of up to 25Mb, some even greater. 
                There are practical limits to the size of a HBase column (see 
                    <a href="http://hbase.apache.org/book.html#supported.datatypes">http://hbase.apache.org/book.html#supported.datatypes</a>).
                To adress this issue, the implementation splits the message into smaller chunks and saves each chunk into a separate column. 
                The columns have increasing integer names starting with 1 and there can be at most Long.MAX_VALUE chunks. 
                </p>
                <p>
                The magic happens in 
                    <strong>ChunkInputStream</strong> and 
                    <strong>ChunkOutputStream</strong> that extend 
                InputStream and OutputStream from java.io package. 
                    <br/>
                Data is retrieved using HBase Get operation and stored into an internal byte array. 
                Data is stored using HBase Put operation and chunks are split into 
                    <strong>chunkSize</strong> configurable sized chunks. 
                Things could be more efficient if HBase had streaming support. 
                </p>
            </subsection>
            <subsection name="HBaseMessage">
                <p>Extends AbstractMessage and represents a message in the message store. 
                What is important to remember is that the current implementation retrieves just the message meta-data from HBase 
                and uses ChunkInputStream to load the message body only when needed.
                </p>
            </subsection>            
        </section>
    </body>

</document>
