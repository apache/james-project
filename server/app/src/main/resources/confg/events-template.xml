<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
 -->

<!--
   This template file can be used as example for James Server configuration
   DO NOT USE IT AS SUCH AND ADAPT IT TO YOUR NEEDS
-->

<events>
    <!-- By default the event system is in memory based, providing better performances but is not
    distributed and won't do the work with multiples servers -->
    <type>default</type>

    <!-- Do you want to wait for MailboxListeners to be executed before returning result to the user ?

     If yes set this to synchronous
     If no set this to asynchronous
     If you want to use default supported behaviour exposed by listeners set this to mixed
     -->
    <delivery>synchronous</delivery>

    <!-- Broadcast event system will send messages to all your James servers.

    It is the only viable options if you rely on Mailbox Listeners that do not perform well in a distributed system.

    Here follows a non exhaustive list of such Mailbox Listeners :
     - Memory quota based system
     - Lucene based search system

    Workload is higher because event needs to be serialized and de serialized.

    Also note that depending on the publisher you use, messages might be either lost or duplicated, implying wrong
    indexing or wrong quota count on network partitions.

    Here follows a sample configuration :
    -->
    <!--
    <type>broadcast</type>
    <serialization>json</serialization>
    <publisher>kafka</publisher>
    -->

    <!--
    Further notes on the choice you had here :

    serialization : you have to choices : either json or message-pack

    message-pack is a binary representation for json, and is 2 times lighter by average, but is 2 time slower to serialize and de serialize.
    This choice allows you to trade compute against network.

    publisher : Publish - subscribe used. The only current implementation is Kafka.
    -->

    <!-- Registered event system

    Scalable event system based on registration : each James server listen on his own topic and manage registrations on
    mailbox paths in order to receive events interesting him.

    This configuration does not support distributed unfriendly Mailbox Listeners (see the non exhaustive list above) for obvious reasons.
    -->
    <!--
    <type>registered</type>
    <serialization>json</serialization>
    <registration>cassandra</registration>
    <publisher>kafka</publisher>
    -->

    <!--
    The only registration system available is Cassandra, used in an available fashion. This means there is no warranties,
    either at least one delivery nor at most one delivery. But you get the certitude that the system will always be available.
    -->

</events>