# Threads

> :warning:
> Partially implemented.

Replies are grouped together with the original message to form a Thread. In JMAP, a Thread is simply a flat list of Emails, ordered by date. Every Email MUST belong to a Thread, even if it is the only Email in the Thread.

The exact algorithm for determining whether two Emails belong to the same Thread is not mandated in this spec to allow for compatibility with different existing systems. For new implementations, it is suggested that two messages belong in the same Thread if both of the following conditions apply:

  1. An identical message id [@!RFC5322] appears in both messages in any of the
     Message-Id, In-Reply-To, and References header fields.
  2. After stripping automatically added prefixes such as "Fwd:", "Re:",
     "[List-Tag]", etc., and ignoring white space, the subjects are the same. This avoids the situation where a person replies to an old message as a convenient way of finding the right recipient to send to but changes the subject and starts a new conversation.

If messages are delivered out of order for some reason, a user may have two Emails in the same Thread but without headers that associate them with each other. The arrival of a third Email may provide the missing references to join them all together into a single Thread. Since the *threadId* of an Email is immutable, if the server wishes to merge the Threads, it MUST handle this by deleting and reinserting (with a new Email id) the Emails that change *threadId*.

A **Thread** object has the following properties:

- **id**: `Id` (immutable; server-set)
  The id of the Thread.
- **emailIds**: `Id[]` (server-set)
  The ids of the Emails in the Thread, sorted by the *receivedAt* date of the Email, oldest first. If two Emails have an identical date, the sort is server dependent but MUST be stable (sorting by id is recommended).

The following JMAP methods are supported.

## Thread/get

> :information_source:
> Implemented

This is a standard "/get" method as described in [@!RFC8620], Section 5.1.

### Example

Request:

    [[ "Thread/get", {
      "accountId": "acme",
      "ids": ["f123u4", "f41u44"]
    }, "#1" ]]

with response:

    [[ "Thread/get", {
      "accountId": "acme",
      "state": "f6a7e214",
      "list": [
        {
          "id": "f123u4",
          "emailIds": [ "eaa623", "f782cbb"]
        },
        {
          "id": "f41u44",
          "emailIds": [ "82cf7bb" ]
        }
      ],
      "notFound": []
    }, "#1" ]]

## Thread/changes

> :warning:
> Naive implementation

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2.
